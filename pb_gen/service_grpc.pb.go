// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb_gen

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// GoodsInfoAdminClient is the client API for GoodsInfoAdmin service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GoodsInfoAdminClient interface {
	//创建商品
	CreateGoods(ctx context.Context, in *CreateGoodsRequest, opts ...grpc.CallOption) (*CreateGoodsResponse, error)
	//查询商品
	QueryGoods(ctx context.Context, in *QueryGoodsRequest, opts ...grpc.CallOption) (*QueryGoodsResponse, error)
	//创建客户
	CreateClient(ctx context.Context, in *CreateClientRequest, opts ...grpc.CallOption) (*CreateClientResponse, error)
	//查询客户
	QueryClient(ctx context.Context, in *QueryClientRequest, opts ...grpc.CallOption) (*QueryClientResponse, error)
	//创建订单
	CreateOrder(ctx context.Context, in *CreateOrderRequest, opts ...grpc.CallOption) (*CreateOrderResponse, error)
	//查询订单
	QueryOrder(ctx context.Context, in *QueryOrderRequest, opts ...grpc.CallOption) (*QueryOrderResponse, error)
	//批量创建商品
	MCreateGoods(ctx context.Context, in *MCreateGoodsRequest, opts ...grpc.CallOption) (*MCreateGoodsResponse, error)
}

type goodsInfoAdminClient struct {
	cc grpc.ClientConnInterface
}

func NewGoodsInfoAdminClient(cc grpc.ClientConnInterface) GoodsInfoAdminClient {
	return &goodsInfoAdminClient{cc}
}

func (c *goodsInfoAdminClient) CreateGoods(ctx context.Context, in *CreateGoodsRequest, opts ...grpc.CallOption) (*CreateGoodsResponse, error) {
	out := new(CreateGoodsResponse)
	err := c.cc.Invoke(ctx, "/goods.GoodsInfoAdmin/CreateGoods", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goodsInfoAdminClient) QueryGoods(ctx context.Context, in *QueryGoodsRequest, opts ...grpc.CallOption) (*QueryGoodsResponse, error) {
	out := new(QueryGoodsResponse)
	err := c.cc.Invoke(ctx, "/goods.GoodsInfoAdmin/QueryGoods", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goodsInfoAdminClient) CreateClient(ctx context.Context, in *CreateClientRequest, opts ...grpc.CallOption) (*CreateClientResponse, error) {
	out := new(CreateClientResponse)
	err := c.cc.Invoke(ctx, "/goods.GoodsInfoAdmin/CreateClient", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goodsInfoAdminClient) QueryClient(ctx context.Context, in *QueryClientRequest, opts ...grpc.CallOption) (*QueryClientResponse, error) {
	out := new(QueryClientResponse)
	err := c.cc.Invoke(ctx, "/goods.GoodsInfoAdmin/QueryClient", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goodsInfoAdminClient) CreateOrder(ctx context.Context, in *CreateOrderRequest, opts ...grpc.CallOption) (*CreateOrderResponse, error) {
	out := new(CreateOrderResponse)
	err := c.cc.Invoke(ctx, "/goods.GoodsInfoAdmin/CreateOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goodsInfoAdminClient) QueryOrder(ctx context.Context, in *QueryOrderRequest, opts ...grpc.CallOption) (*QueryOrderResponse, error) {
	out := new(QueryOrderResponse)
	err := c.cc.Invoke(ctx, "/goods.GoodsInfoAdmin/QueryOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goodsInfoAdminClient) MCreateGoods(ctx context.Context, in *MCreateGoodsRequest, opts ...grpc.CallOption) (*MCreateGoodsResponse, error) {
	out := new(MCreateGoodsResponse)
	err := c.cc.Invoke(ctx, "/goods.GoodsInfoAdmin/MCreateGoods", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GoodsInfoAdminServer is the server API for GoodsInfoAdmin service.
// All implementations must embed UnimplementedGoodsInfoAdminServer
// for forward compatibility
type GoodsInfoAdminServer interface {
	//创建商品
	CreateGoods(context.Context, *CreateGoodsRequest) (*CreateGoodsResponse, error)
	//查询商品
	QueryGoods(context.Context, *QueryGoodsRequest) (*QueryGoodsResponse, error)
	//创建客户
	CreateClient(context.Context, *CreateClientRequest) (*CreateClientResponse, error)
	//查询客户
	QueryClient(context.Context, *QueryClientRequest) (*QueryClientResponse, error)
	//创建订单
	CreateOrder(context.Context, *CreateOrderRequest) (*CreateOrderResponse, error)
	//查询订单
	QueryOrder(context.Context, *QueryOrderRequest) (*QueryOrderResponse, error)
	//批量创建商品
	MCreateGoods(context.Context, *MCreateGoodsRequest) (*MCreateGoodsResponse, error)
	mustEmbedUnimplementedGoodsInfoAdminServer()
}

// UnimplementedGoodsInfoAdminServer must be embedded to have forward compatible implementations.
type UnimplementedGoodsInfoAdminServer struct {
}

func (UnimplementedGoodsInfoAdminServer) CreateGoods(context.Context, *CreateGoodsRequest) (*CreateGoodsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGoods not implemented")
}
func (UnimplementedGoodsInfoAdminServer) QueryGoods(context.Context, *QueryGoodsRequest) (*QueryGoodsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryGoods not implemented")
}
func (UnimplementedGoodsInfoAdminServer) CreateClient(context.Context, *CreateClientRequest) (*CreateClientResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateClient not implemented")
}
func (UnimplementedGoodsInfoAdminServer) QueryClient(context.Context, *QueryClientRequest) (*QueryClientResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryClient not implemented")
}
func (UnimplementedGoodsInfoAdminServer) CreateOrder(context.Context, *CreateOrderRequest) (*CreateOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrder not implemented")
}
func (UnimplementedGoodsInfoAdminServer) QueryOrder(context.Context, *QueryOrderRequest) (*QueryOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryOrder not implemented")
}
func (UnimplementedGoodsInfoAdminServer) MCreateGoods(context.Context, *MCreateGoodsRequest) (*MCreateGoodsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MCreateGoods not implemented")
}
func (UnimplementedGoodsInfoAdminServer) mustEmbedUnimplementedGoodsInfoAdminServer() {}

// UnsafeGoodsInfoAdminServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GoodsInfoAdminServer will
// result in compilation errors.
type UnsafeGoodsInfoAdminServer interface {
	mustEmbedUnimplementedGoodsInfoAdminServer()
}

func RegisterGoodsInfoAdminServer(s grpc.ServiceRegistrar, srv GoodsInfoAdminServer) {
	s.RegisterService(&GoodsInfoAdmin_ServiceDesc, srv)
}

func _GoodsInfoAdmin_CreateGoods_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateGoodsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoodsInfoAdminServer).CreateGoods(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/goods.GoodsInfoAdmin/CreateGoods",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoodsInfoAdminServer).CreateGoods(ctx, req.(*CreateGoodsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoodsInfoAdmin_QueryGoods_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGoodsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoodsInfoAdminServer).QueryGoods(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/goods.GoodsInfoAdmin/QueryGoods",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoodsInfoAdminServer).QueryGoods(ctx, req.(*QueryGoodsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoodsInfoAdmin_CreateClient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateClientRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoodsInfoAdminServer).CreateClient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/goods.GoodsInfoAdmin/CreateClient",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoodsInfoAdminServer).CreateClient(ctx, req.(*CreateClientRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoodsInfoAdmin_QueryClient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryClientRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoodsInfoAdminServer).QueryClient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/goods.GoodsInfoAdmin/QueryClient",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoodsInfoAdminServer).QueryClient(ctx, req.(*QueryClientRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoodsInfoAdmin_CreateOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoodsInfoAdminServer).CreateOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/goods.GoodsInfoAdmin/CreateOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoodsInfoAdminServer).CreateOrder(ctx, req.(*CreateOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoodsInfoAdmin_QueryOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoodsInfoAdminServer).QueryOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/goods.GoodsInfoAdmin/QueryOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoodsInfoAdminServer).QueryOrder(ctx, req.(*QueryOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoodsInfoAdmin_MCreateGoods_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MCreateGoodsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoodsInfoAdminServer).MCreateGoods(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/goods.GoodsInfoAdmin/MCreateGoods",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoodsInfoAdminServer).MCreateGoods(ctx, req.(*MCreateGoodsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GoodsInfoAdmin_ServiceDesc is the grpc.ServiceDesc for GoodsInfoAdmin service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GoodsInfoAdmin_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "goods.GoodsInfoAdmin",
	HandlerType: (*GoodsInfoAdminServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateGoods",
			Handler:    _GoodsInfoAdmin_CreateGoods_Handler,
		},
		{
			MethodName: "QueryGoods",
			Handler:    _GoodsInfoAdmin_QueryGoods_Handler,
		},
		{
			MethodName: "CreateClient",
			Handler:    _GoodsInfoAdmin_CreateClient_Handler,
		},
		{
			MethodName: "QueryClient",
			Handler:    _GoodsInfoAdmin_QueryClient_Handler,
		},
		{
			MethodName: "CreateOrder",
			Handler:    _GoodsInfoAdmin_CreateOrder_Handler,
		},
		{
			MethodName: "QueryOrder",
			Handler:    _GoodsInfoAdmin_QueryOrder_Handler,
		},
		{
			MethodName: "MCreateGoods",
			Handler:    _GoodsInfoAdmin_MCreateGoods_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}
